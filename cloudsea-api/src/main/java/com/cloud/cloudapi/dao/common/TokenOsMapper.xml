<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cloud.cloudapi.dao.common.TokenOsMapper">

	<resultMap id="BaseResultMap" type="com.cloud.cloudapi.pojo.common.TokenOs">
        <id column="ostokenid" property="tokenid" jdbcType="VARCHAR" />
        <result column="tenantuserid" property="tenantUserid" jdbcType="VARCHAR" />
        <result column="createtime" property="createtime" jdbcType="BIGINT" />
        <result column="expirestime" property="expirestime" jdbcType="BIGINT" />
        <result column="ostenantid" property="tenantid" jdbcType="VARCHAR" />
        <result column="osdomainid" property="domainid" jdbcType="VARCHAR" />
        <result column="name" property="tenantname" jdbcType="VARCHAR" />
    </resultMap>
    
    <sql id="all_fields">
        tokenos.ostokenid, tokenos.tenantuserid, tokenos.createtime, tokenos.expirestime,user_tenant_domain.ostenantid,user_tenant_domain.osdomainid,tenants.name
	</sql>
	
	<sql id="basic_fields">
        ostokenid,tenantuserid, createtime, expirestime
	</sql>
	
	<!--basic super mapper -->
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" /> from tokenos,tokengui,user_tenant_domain,tenants where tokenos.ostokenid=#{id}
     and user_tenant_domain.id = tokenos.tenantuserid
     and tokenos.tenantuserid = tokengui.tenantuserid
     and user_tenant_domain.ostenantid = tenants.id
     LIMIT 1
    </select>
    
    <insert id="insertSelective" parameterType="com.cloud.cloudapi.pojo.common.TokenOs">
		insert into tokenos ( <include refid="basic_fields" /> )
		values (
		#{tokenid}, #{tenantUserid}, #{createtime}, #{expirestime}
		)
	</insert>
	

	<update id="updateByPrimaryKeySelective" parameterType="com.cloud.cloudapi.pojo.common.TokenOs">
        update tokenos set guitokenid = #{guitokenid}, createtime = #{createtime}, 
        expirestime=#{expirestime}
        where ostokenid = #{tokenid}
    </update>

    <delete id= "deleteByPrimaryKey" parameterType="java.lang.String">
       delete from tokenos where ostokenid =#{id}
	</delete>
  
   <!-- self dao -->
    <select id="countNum" resultType="java.lang.Integer" parameterType="java.lang.String">
		select count(*) as num from tokenos where ostokenid = #{ostokenid};
	</select>
	
	<!-- 根据设计 tenantuserid 可唯一确定一条token-->
    <select id="selectByDomainTenantUserId" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" />
	 from tokenos,tokengui,user_tenant_domain,tenants where tokenos.tenantuserid=#{tenantuserid} 
	 and user_tenant_domain.id = tokenos.tenantuserid
	 and tokenos.tenantuserid = tokengui.tenantuserid 
	 and user_tenant_domain.ostenantid = tenants.id
	 LIMIT 1
    </select>
    
    <select id="selectByGuiTokenId" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" />
	 from tokenos,tokengui,user_tenant_domain,tenants where tokengui.guitokenid=#{guitokenid} 
	 and tokenos.tenantuserid = tokengui.tenantuserid
	 and user_tenant_domain.id = tokenos.tenantuserid 
	 and user_tenant_domain.ostenantid = tenants.id
	 LIMIT 1
    </select>   
    
    <!-- 根据设计 userid,ostenantid,osdomainid 可唯一确定一条token-->
    <select id="selectByDomainTenantUser" resultMap="BaseResultMap" parameterType="com.cloud.cloudapi.pojo.common.DomainTenantUser">
     select <include refid="all_fields" />
	 from tokenos,tokengui,user_tenant_domain ,tenants where  user_tenant_domain.userid=#{userid}
	 and user_tenant_domain.ostenantid=#{ostenantid}
	 and user_tenant_domain.osdomainid=#{osdomainid}
	 and user_tenant_domain.id = tokenos.tenantuserid
	 and tokenos.tenantuserid = tokengui.tenantuserid 
	 and user_tenant_domain.ostenantid = tenants.id
	 LIMIT 1
    </select>
 
     <!-- xml规则不允许的字符使用时，需用cdata声明 -->  
    <delete id= "deleteBytime" parameterType= "java.sql.Date">
       delete from tokenos where
        <![CDATA[expirestime  < #{nowtime}]]>     
	</delete>
    
</mapper>