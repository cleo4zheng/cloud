<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cloud.cloudapi.dao.common.InstanceMapper">
	<resultMap id="BaseResultMap" type="com.cloud.cloudapi.pojo.openstackapi.forgui.Instance">
	    <result column="id" property="id" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="VARCHAR" />
        <result column="image_name" property="sourceName" jdbcType="VARCHAR" />
        <result column="image_id" property="sourceId" jdbcType="VARCHAR" />
        <result column="core" property="core" jdbcType="VARCHAR" />
        <result column="ram" property="ram" jdbcType="VARCHAR" />
        <result column="system_volume" property="volumeSize" jdbcType="VARCHAR" />
        <result column="system_volume_type" property="volumeType" jdbcType="VARCHAR" />
        <result column="image_ids" property="imageIds" jdbcType="VARCHAR" />
        <result column="volume_ids" property="volumeIds" jdbcType="VARCHAR" />
        <result column="network_ids" property="networkIds" jdbcType="VARCHAR" />
        <result column="keypair_ids" property="keypairIds" jdbcType="VARCHAR" />
        <result column="fixedips" property="fixedips" jdbcType="VARCHAR" />
        <result column="floatingips" property="floatingips" jdbcType="VARCHAR" />
        <result column="security_group_ids" property="securityGroupIds" jdbcType="VARCHAR" />
        <result column="portids" property="portIds" jdbcType="VARCHAR" />
        <result column="lbid" property="lbid" jdbcType="VARCHAR" />
        <result column="host_name" property="hostName" jdbcType="VARCHAR" />
        <result column="tenant_id" property="tenantId" jdbcType="VARCHAR" />
        <result column="million_seconds" property="millionSeconds" jdbcType="BIGINT" />
        <result column="type" property="type" jdbcType="VARCHAR" />
        <result column="source" property="source" jdbcType="VARCHAR" />
        <result column="availability_zone" property="availabilityZone" jdbcType="VARCHAR" />
        <!-- For PAAS TJ== flag project dev steps -->
        <result column="tag" property="tag" jdbcType="VARCHAR" />
    </resultMap>
    
    <sql id="all_fields">
        id, name, status,image_name,image_id,core,ram,system_volume,system_volume_type,image_ids,volume_ids,network_ids,keypair_ids,fixedips,
        floatingips,security_group_ids,portids,lbid,host_name,tenant_id,million_seconds,type,source,availability_zone
        ,tag
	</sql>
	
	<!-- basic super dao -->
	
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" /> from instances where id=#{id}
    </select>
    
    <select id="selectListByInstanceIds" resultMap="BaseResultMap">
     select <include refid="all_fields" />
	 from instances
	 where id in
       <foreach collection="list" item="id" open="(" close=")" separator=",">
         #{id}
       </foreach>
    </select>
    
   <select id="selectListByTenantIds" resultMap="BaseResultMap">
    select <include refid="all_fields" />
	 from instances
	 where tenant_id in
      <foreach collection="list" item="id" open="(" close=")" separator=",">
        #{id}
      </foreach>
   </select> 
   
    <insert id="insertSelective" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Instance">
		insert into instances ( <include refid="all_fields" /> )
		values (
		#{id}, #{name}, #{status}, #{sourceName}, #{sourceId}, #{core},#{ram},#{volumeSize},#{volumeType},#{imageIds},#{volumeIds},#{networkIds},
		#{keypairIds},#{fixedips},#{floatingips},#{securityGroupIds},#{portIds},#{lbid},#{hostName},#{tenantId},#{millionSeconds},#{type},#{source},#{availabilityZone}
		,#{tag}
		)
	</insert>
	
	<insert id="insertOrUpdate">
	  insert into instances (<include refid="all_fields" /> )   
       values  
       (#{id},#{name},#{status},#{sourceName},#{sourceId},#{core},#{ram},#{volumeSize},#{volumeType},#{imageIds},#{volumeIds},
        #{networkIds},#{keypairIds},#{fixedips},#{floatingips},#{securityGroupIds},#{portIds},#{lbid},#{hostName},#{tenantId},#{millionSeconds},#{type},#{source},#{availabilityZone})  
        ,#{tag})  
       ON DUPLICATE KEY UPDATE
       status = #{status}, name = #{name},image_name = #{sourceName},image_id = #{sourceId},core = #{core},
       ram = #{ram},system_volume = #{volumeSize},system_volume_type = #{volumeType},image_ids=#{imageIds},volume_ids=#{volumeIds},network_ids=#{networkIds},keypair_ids=#{keypairIds},fixedips=#{fixedips},
       floatingips = #{floatingips},security_group_ids = #{securityGroupIds},portids = #{portIds},lbid=#{lbid},host_name=#{hostName},tenant_id=#{tenantId},million_seconds=#{millionSeconds},type=#{type},source=#{source},availability_zone=#{availabilityZone}
       ,tag = #{tag}
	</insert>
	
   <!-- 
   <insert id="insertOrUpdateBatch" parameterType="java.util.List">  
       insert into instances (<include refid="all_fields" /> )   
       values  
       <foreach collection="list" item="item" index="index" separator="," >  
        (#{item.id},#{item.name},#{item.status},#{item.sourceName},#{item.sourceId},#{item.core},#{item.ram},#{item.volumeSize},#{item.volumeType},#{item.imageIds},#{item.volumeIds},
        #{item.networkIds},#{item.keypairIds},#{item.fixedips},#{item.floatingips},#{item.securityGroupIds},#{item.portIds},#{item.tenantId},#{item.millionSeconds},#{item.type},#{item.availabilityZone})  
       </foreach> ON DUPLICATE KEY UPDATE
       status = #{item.status}, name = #{item.name},image_name = #{item.sourceName},image_id = #{item.sourceId},core = #{item.core},
       ram = #{item.ram},system_volume = #{item.volumeSize},system_volume_type = #{item.volumeType},image_ids=#{item.imageIds},volume_ids=#{item.volumeIds},network_ids=#{item.networkIds},keypair_ids=#{item.keypairIds},fixedips=#{item.fixedips},
       floatingips = #{item.floatingips},security_group_ids = #{item.securityGroupIds},portids = #{item.portIds},tenant_id=#{item.tenantId},million_seconds=#{item.millionSeconds},type=#{item.type},availability_zone=#{item.availabilityZone}
    </insert> 
     -->
     
    <update id="insertOrUpdateBatch" parameterType="java.util.List">  
       insert into instances (<include refid="all_fields" /> )   
       values  
       <foreach collection="list" item="item" index="index" separator="," >  
        (#{item.id},#{item.name},#{item.status},#{item.sourceName},#{item.sourceId},#{item.core},#{item.ram},#{item.volumeSize},#{item.volumeType},#{item.imageIds},#{item.volumeIds},
        #{item.networkIds},#{item.keypairIds},#{item.fixedips},#{item.floatingips},#{item.securityGroupIds},#{item.portIds},#{item.lbid},#{item.hostName},#{item.tenantId},#{item.millionSeconds},#{item.type},#{item.source},#{item.availabilityZone})  
        ,#{item.tag})  
       </foreach> ON DUPLICATE KEY UPDATE
       status = VALUES(status), name = VALUES(name),image_name = VALUES(image_name),image_id = VALUES(image_id),core = VALUES(core),ram = VALUES(ram),system_volume = VALUES(system_volume),
       system_volume_type = VALUES(system_volume_type),image_ids=VALUES(image_ids),volume_ids=VALUES(volume_ids),network_ids=VALUES(network_ids),keypair_ids=VALUES(keypair_ids),fixedips=VALUES(fixedips),floatingips = VALUES(floatingips),
       security_group_ids = VALUES(security_group_ids),portids = VALUES(portIds),lbid=VALUES(lbid),host_name=VALUES(host_name),tenant_id=VALUES(tenant_id),million_seconds=VALUES(million_seconds),type=VALUES(type),source=#{source},availability_zone=VALUES(availability_zone)
       ,tag=VALUES(tag)
    </update> 
    
	<update id="updateByPrimaryKeySelective" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Instance">
        update instances set status = #{status}, name = #{name},image_name = #{sourceName},image_id = #{sourceId},core = #{core},
        ram = #{ram},system_volume = #{volumeSize},system_volume_type = #{volumeType},image_ids=#{imageIds},volume_ids=#{volumeIds},network_ids=#{networkIds},keypair_ids=#{keypairIds},fixedips=#{fixedips},
        floatingips = #{floatingips},security_group_ids = #{securityGroupIds},portids = #{portIds},lbid=#{lbid},host_name=#{hostName},tenant_id=#{tenantId},million_seconds=#{millionSeconds},type=#{type},source=#{source},availability_zone=#{availabilityZone}
        , tag = #{tag}
        where id = #{id}
    </update>
    
    <delete id= "deleteByPrimaryKey" parameterType="java.lang.String">
       delete from instances where id =#{id}
	</delete>
	
   <delete id= "deleteByInstanceIds">
       delete from instances where id in
       <foreach collection="list" item="id" open="(" close=")" separator=",">
         #{id}
       </foreach>
	</delete>
	
	<!-- self dao -->
    <select id="countNum" resultType="java.lang.Integer">
	  select count(*) as num from instances
	</select>
	
   <select id="countNumByTenantId" resultType="java.lang.Integer" parameterType="java.lang.String">
	  select count(*) as num from instances where tenant_id =#{tenantId}
	</select>
	
    <select id="selectList" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from instances 
    </select>
    
    <select id="selectListByTenantId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
	  from instances where tenant_id = #{tenantId}
    </select>
    
    <select id="selectListByLbid" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
	  from instances where lbid = #{lbid}
    </select>
    
    <select id="selectInstanceByFixedIp" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
      <!-- 
      from instances where fixedips like '%#{fixedips}%' 
       -->
       from instances where fixedips like CONCAT('%',#{fixedips},'%')
    </select>
    
    <select id="selectInstanceByPortId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
      from instances where portids = #{portIds}
    </select>
    
    <select id="selectInstanceByVolumeId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
      from instances where volume_ids = #{volumeIds}
    </select>
    
    <select id="selectInstanceByImageId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
      from instances where image_ids like CONCAT('%',#{imageIds},'%')
    </select>
   
     <select id="selectInstanceByFixedIpAndNetwork" resultMap="BaseResultMap">
      select <include refid="all_fields" />
      <!-- 
      from instances where fixedips like '%#{fixedips}%' 
       -->
       from instances where fixedips like CONCAT('%',#{0},'%') and network_ids like CONCAT('%',#{1},'%')
    </select>
    
    <select id="selectInstanceBySecurityGroupId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
      from instances where security_group_ids like CONCAT('%',#{securityGroupIds},'%')
    </select>
    
    <select id="selectByNetworkId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
      from instances where network_ids like CONCAT('%',#{networkIds},'%')
    </select>
    
    <select id="selectInstanceByFloatingIp" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
	  from instances where floatingips like CONCAT('%',#{floatingips},'%')
    </select>
    
    <select id="selectListByTenantIdWithLimit" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from instances where tenant_id = #{0} limit #{1}
    </select>
    
    <select id="selectListByTenantIdWithTypeAndLimit" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from instances where tenant_id = #{0} and type = #{1} order by million_seconds DESC limit #{2}
    </select>
    
     <select id="selectListByTenantIdWithType" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from instances where tenant_id = #{0} and type = #{1} order by million_seconds DESC
     </select>
    
    <select id="countNumByInstanceStatus" resultType="java.lang.Integer" parameterType="java.lang.String">
	  select count(*) as num from instances where status =#{status}
	</select>
     
    <select id="selectListForPage" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from instances  limit #{0}, #{1}
    </select>    

</mapper>