<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cloud.cloudapi.dao.common.RouterMapper">

	<resultMap id="BaseResultMap" type="com.cloud.cloudapi.pojo.openstackapi.forgui.Router">
	    <id column="id" property="id" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="gateway_id" property="gatewayId" jdbcType="VARCHAR" />
        <result column="tenant_id" property="tenant_id" jdbcType="VARCHAR" />
        <result column="floating_ips" property="floatingIps" jdbcType="VARCHAR" />
        <result column="port_ids" property="portIds" jdbcType="VARCHAR" />
        <result column="subnet_id" property="subnet_id" jdbcType="VARCHAR" />
        <result column="subnet_ids" property="subnetIds" jdbcType="VARCHAR" />
        <result column="firewall_id" property="firewallId" jdbcType="VARCHAR" />
        <result column="vpn_id" property="vpnId" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="VARCHAR" />
        <result column="million_seconds" property="millionSeconds" jdbcType="BIGINT" />
    </resultMap>

    <sql id="all_fields">
        id,name,gateway_id,tenant_id,floating_ips,port_ids,subnet_id,subnet_ids,firewall_id,vpn_id,status,million_seconds
	</sql>
	
	<!--basic super mapper -->
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" /> from routers where id=#{id}
    </select>
    
    <select id="selectByVPNId" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" /> from routers where vpn_id=#{vpnId}
    </select>
    
    <select id="selectBySubnetId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
	  from routers where subnet_ids like CONCAT('%',#{subnetIds},'%')
    </select>
    
    <select id="selectByIds" resultMap="BaseResultMap">
      select <include refid="all_fields" /> from routers e where e.id in
      <foreach collection="array" item="id" index="index" open="(" close=")" separator=","> 
        #{id}
      </foreach>
    </select>
    
   <select id="selectListByTenantIds" resultMap="BaseResultMap">
    select <include refid="all_fields" />
	 from routers
	 where tenant_id in
      <foreach collection="list" item="id" open="(" close=")" separator=",">
        #{id}
      </foreach>
   </select> 
   
    <insert id="insertSelective" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Router">
		insert into routers ( <include refid="all_fields" /> )
		values (
		#{id}, #{name},#{gatewayId}, #{tenant_id},#{floatingIps},#{portIds},#{subnet_id},#{subnetIds},#{firewallId},#{vpnId},#{status},#{millionSeconds}
		)
	</insert>
	
   <insert id="insertOrUpdate">
       insert into routers (<include refid="all_fields" /> )   
       values  
       (#{id}, #{name},#{gatewayId}, #{tenant_id},#{floatingIps},#{portIds},#{subnet_id},#{subnetIds},#{firewallId},#{vpnId},#{status},#{millionSeconds})  
        ON DUPLICATE KEY UPDATE
        name=#{name},gateway_id=#{gatewayId},tenant_id=#{tenant_id},floating_ips=#{floatingIps},port_ids=#{portIds},
        subnet_id=#{subnet_id},subnet_ids=#{subnetIds},firewall_id=#{firewallId},vpn_id=#{vpnId},status=#{status},million_seconds=#{millionSeconds}
	</insert>
	
	<update id="insertOrUpdateBatch" parameterType="java.util.List">  
       insert into routers (<include refid="all_fields" /> )   
       values  
       <foreach collection="list" item="item" index="index" separator="," >  
         (#{item.id},#{item.name}, #{item.gatewayId},#{item.gatewayId}, #{item.floatingIps},#{item.portIds},#{item.subnet_id},
         #{item.subnetIds},#{item.firewallId},#{item.vpnId},#{item.status},#{item.millionSeconds})    
       </foreach> ON DUPLICATE KEY UPDATE
       name = VALUES(name),gateway_id = VALUES(gateway_id),tenant_id = VALUES(tenant_id), floating_ips = VALUES(floating_ips), port_ids = VALUES(port_ids), 
       subnet_id = VALUES(subnet_id), subnet_ids = VALUES(subnet_ids), firewall_id = VALUES(firewall_id),vpn_id = VALUES(vpn_id), status = VALUES(status), million_seconds = VALUES(million_seconds)
    </update>
    
	<update id="updateByPrimaryKeySelective" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Router">
        update routers set name=#{name},gateway_id=#{gatewayId},tenant_id=#{tenant_id},floating_ips=#{floatingIps},port_ids=#{portIds},
        subnet_id=#{subnet_id},subnet_ids=#{subnetIds},firewall_id=#{firewallId},vpn_id=#{vpnId},status=#{status},million_seconds=#{millionSeconds}
        where id = #{id}
    </update>
    
    <update id="updateRouterFirewallInfo" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Router">
        update routers set firewall_id=#{firewallId}
        where id = #{id}
    </update>
    
    <delete id= "deleteByPrimaryKey" parameterType="java.lang.String">
       delete from routers where id =#{id}
	</delete>
  
   <!-- self dao -->
	<select id="selectAll" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from routers 
    </select>
    
    <select id="selectAllByTenantId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
	  from routers where tenant_id = #{tenant_id} order by million_seconds DESC
    </select>
     
    <select id="selectListWithLimit" resultMap="BaseResultMap" parameterType="java.lang.Integer">
      select <include refid="all_fields" />
	  from routers limit #{limit}
    </select>
    
    <select id="selectAllByTenantIdWithLimit" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from routers where tenant_id = #{0} order by million_seconds DESC limit #{1}
    </select>
         
    <select id="selectAllForPage" resultMap="BaseResultMap">
      select <include refid="all_fields" />
	  from routers  limit #{0}, #{1}
    </select>  
 
</mapper>