<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cloud.cloudapi.dao.common.NetworkMapper">
	<resultMap id="BaseResultMap" type="com.cloud.cloudapi.pojo.openstackapi.forgui.Network">
        <result column="id" property="id" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="VARCHAR" />
        <result column="subnet_id" property="subnetId" jdbcType="VARCHAR" />
        <result column="tenant_id" property="tenant_id" jdbcType="VARCHAR" />
        <result column="port_id" property="portId" jdbcType="VARCHAR" />
        <result column="floatingip_id" property="floatingipId" jdbcType="VARCHAR" />
        <result column="external" property="external" jdbcType="BOOLEAN" />
        <result column="basic" property="basic" jdbcType="BOOLEAN" />
        <result column="million_seconds" property="millionSeconds" jdbcType="BIGINT" />
    </resultMap>

    <resultMap id="InstanceNetwork" type="com.cloud.cloudapi.pojo.openstackapi.forgui.InstanceNetworkRel">
        <result column="instance_id" property="instanceId" jdbcType="VARCHAR" />
        <result column="network_id" property="networkId" jdbcType="VARCHAR" />
    </resultMap>
    
    <sql id="all_fields">
        id,name, status, subnet_id,tenant_id,port_id,floatingip_id,external,basic,million_seconds
	</sql>
	
	<!--basic super mapper -->
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" /> from networks where id=#{id}
    </select>
    
    <select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" /> from networks where name=#{name}
    </select>
    
    <select id="selectListByTenantIds" resultMap="BaseResultMap">
    select <include refid="all_fields" />
	 from networks
	 where tenant_id in
      <foreach collection="list" item="id" open="(" close=")" separator=",">
        #{id}
      </foreach>
   </select> 
   
    <select id="selectListByPortId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
	  from networks where port_id like CONCAT('%',#{portId},'%')
    </select>
    
    <select id="selectBySubnetId" resultMap="BaseResultMap" parameterType="java.lang.String">
      select <include refid="all_fields" />
	  from networks where subnet_id like CONCAT('%',#{subnetId},'%')
    </select>
    
    <insert id="insertSelective" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Network">
		insert into networks ( <include refid="all_fields" /> )
		values (
		  #{id}, #{name}, #{status}, #{subnetId},#{tenant_id},#{portId},#{floatingipId},#{external},#{basic},#{millionSeconds}
		)
	</insert>
	
    <insert id="insertOrUpdate">
       insert into networks (<include refid="all_fields" /> )   
       values  
       ( #{id}, #{name}, #{status}, #{subnetId},#{tenant_id},#{portId},#{floatingipId},#{external},#{basic},#{millionSeconds})  
        ON DUPLICATE KEY UPDATE
        name = #{name}, status = #{status}, subnet_id=#{subnetId},tenant_id=#{tenant_id},port_id=#{portId},
        floatingip_id=#{floatingipId},external=#{external},basic=#{basic},million_seconds=#{millionSeconds}
	</insert>
	
	<update id="insertOrUpdateBatch" parameterType="java.util.List">  
       insert into networks (<include refid="all_fields" /> )   
       values  
       <foreach collection="list" item="item" index="index" separator="," >  
         (#{item.id},#{item.name}, #{item.status},#{item.subnetId}, #{item.tenant_id},#{item.portId},
         #{item.floatingipId},#{item.external},#{item.basic},#{item.millionSeconds})    
       </foreach> ON DUPLICATE KEY UPDATE
       name = VALUES(name),status = VALUES(status),subnet_id = VALUES(subnet_id), tenant_id = VALUES(tenant_id), port_id = VALUES(port_id), 
       floatingip_id = VALUES(floatingip_id), external = VALUES(external), basic = VALUES(basic), million_seconds = VALUES(million_seconds)
    </update>
    
	 <insert id="insertInstancesNetworks" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Network">
		insert into instances_networks("instance_id", "network_id")
		values (
		  #{instance_id}, #{id}
		 )
	</insert>
	
	 <insert id="insertTenantsNetworks" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Network">
		insert into tenants_networks("tenant_id", "network_id")
		values(
		  #{tennat_id}, #{id}
		)
	</insert>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.cloud.cloudapi.pojo.openstackapi.forgui.Network">
        update networks set name = #{name}, status = #{status}, subnet_id=#{subnetId},tenant_id=#{tenant_id},port_id=#{portId},
        floatingip_id=#{floatingipId},external=#{external},basic=#{basic},million_seconds=#{millionSeconds}
        where id = #{id}
    </update>
    
    <!--
    <delete id= "deleteByPrimaryKey" parameterType="java.lang.String">
       delete from networks where id =#{id}
       delete from tenants_networks where network_id = #{id}
       delete from instances_networks where network_id = #{id}
	</delete>
	-->
	
	<delete id= "deleteByPrimaryKey" parameterType="java.lang.String">
       delete from networks where id =#{id}
	</delete>
	
	<delete id= "deleteInstancesNetworks" parameterType="java.lang.String">
       delete from instances_networks where network_id = #{network_id}
	</delete>
	
	<delete id= "deleteTenantsNetworks" parameterType="java.lang.String">
       delete from tenants_networks where network_id = #{network_id}
	</delete>
	
    <select id="selectAllList" resultMap="BaseResultMap">
     select <include refid="all_fields" />
	 from networks 
    </select>
    
    <select id="selectExternalNetworks" resultMap="BaseResultMap">
     select <include refid="all_fields" />
	 from networks where external = true order by million_seconds DESC
    </select>
    
    <select id="selectListByTenantIdWithLimit" resultMap="BaseResultMap" >
     select <include refid="all_fields" />
	 from networks
	 where tenant_id = #{0} order by million_seconds DESC limit #{1}
    </select>
    
   <select id="selectNetworksById" resultMap="BaseResultMap">
      select * from networks e where e.id in
      <foreach collection="array" item="id" index="index" open="(" close=")" separator=","> 
        #{id}
      </foreach>
    </select>
    
    <select id="selectListByTenantId" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" />
	 from networks
	 where tenant_id = #{tenant_id} order by million_seconds DESC
    </select>

    <select id="selectTenantBasicNetwork" resultMap="BaseResultMap" parameterType="java.lang.String">
     select <include refid="all_fields" />
	 from networks
	 where tenant_id = #{tenant_id} and basic = true
    </select>

   <select id="selectListByInstanceId" resultMap="InstanceNetwork" parameterType="java.lang.String">
     select instance_id,network_id
	 from instances_networks
	 where instance_id = #{instanceId}
    </select>
   
    <select id="countNum" resultType="java.lang.Integer">
	  select count(*) as num from networks
	</select>
	
</mapper>